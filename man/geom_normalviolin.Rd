% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{geom_normalviolin}
\alias{geom_normalviolin}
\title{Creates normal violins with specified means and standard deviations}
\usage{
geom_normalviolin(
  mapping = NULL,
  data = NULL,
  mu = NULL,
  sigma = NULL,
  nsigma = 4,
  p_tail = 0,
  p_lower_tail = p_tail/2,
  p_upper_tail = p_tail/2,
  tail_fill = "black",
  tail_alpha = 0.4,
  width = 0.6,
  upper_limit = NA,
  lower_limit = NA,
  face_left = TRUE,
  face_right = TRUE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{mu}{A vector of means}

\item{sigma}{A vector of standard deviations}

\item{nsigma}{The number of standard deviations each violin should extend}

\item{p_tail}{The 2-tailed proportion that should be highlighted.
Can be overridden with p_lower_tail and/or p_upper_tail}

\item{p_lower_tail}{The proportion of the distribution that should be
highlighted in the lower tail. Defaults to half of `p_tail`.}

\item{p_upper_tail}{The proportion of the distribution that should be
highlighted in the upper tail. Defaults to half of `p_tail`.}

\item{tail_fill}{fill color for tails}

\item{tail_alpha}{alpha value for tails}

\item{width}{Width of normal violin}

\item{upper_limit}{upper limit for polygons. Needed in case setting
limits in scale_y_continuous or ylim distorts the polygons.}

\item{lower_limit}{lower limit for polygons. Needed in case setting
limits in scale_y_continuous or ylim distorts the polygons.}

\item{face_left}{Display left half of violins. Defaults to `TRUE`}

\item{face_right}{Display right half of violins. Defaults to `TRUE`}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}
}
\value{
A ggplot2 layer that can be added to a plot created with
  [ggplot2::ggplot()].
}
\description{
Creates normal violins with specified means and standard deviations
}
\section{Aesthetics}{

\code{geom_normviolin} understands the following aesthetics
(required aesthetics are in bold):
\itemize{
  \item \strong{x}
  \item \strong{mu} (mean of the normal distribution)
  \item \strong{sigma} (standard deviation of the normal distribution)
  \item width (width of violin)
  \item nsigma (number of standard deviations to which the violins extend)
  \item p_tail (2-tailed proportion of tails highlighted)
  \item p_upper_tail (proportion of upper tails highlighted)
  \item p_lower_tail (proportion of lower tails highlighted)
  \item face_left (display left half of violin?)
  \item face_right (display right half of violin?)
  \item color (of lines)
  \item fill
  \item alpha (of fills)
  \item group
  \item linetype
  \item linewidth
}
}

\examples{
library(ggplot2)
d <- data.frame(
  dist = c("A", "B"),
  dist_mean = c(80, 90),
  dist_sd = c(15, 10))

ggplot(data = d, aes(
  x = dist,
  mu = dist_mean,
  sigma = dist_sd,
  fill = dist)) +
  geom_normalviolin() +
  theme(legend.position = "none")
}
